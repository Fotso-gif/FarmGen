# Generated by Django 5.2 on 2025-10-07 11:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('account_type', models.CharField(choices=[('admin', 'Admin'), ('seller', 'Agriculteur/Vendeur'), ('client', 'Client/Utilisateur')], max_length=10)),
                ('phone', models.CharField(max_length=20, null=True, unique=True)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('region', models.CharField(choices=[('adamaoua', 'Adamaoua'), ('centre', 'Centre'), ('est', 'Est'), ('extreme-nord', 'Extrême-Nord'), ('littoral', 'Littoral'), ('nord', 'Nord'), ('nord-ouest', 'Nord-Ouest'), ('ouest', 'Ouest'), ('sud', 'Sud'), ('sud-ouest', 'Sud-Ouest')], max_length=20)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SellerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(max_length=255)),
                ('farm_description', models.TextField(blank=True)),
                ('specialty', models.CharField(choices=[('legumes', 'Légumes'), ('fruits', 'Fruits'), ('cereales', 'Céréales'), ('tubercules', 'Tubercules'), ('elevage', 'Élevage'), ('produits_laitiers', 'Produits Laitiers'), ('volailles', 'Volailles'), ('apiculture', 'Apiculture'), ('autres', 'Autres')], default='autres', max_length=20)),
                ('farm_size', models.DecimalField(decimal_places=2, help_text='Superficie en hectares', max_digits=10)),
                ('production_capacity', models.CharField(blank=True, help_text='Capacité de production mensuelle/annuelle', max_length=255)),
                ('certification', models.CharField(choices=[('bio', 'Agriculture Biologique'), ('local', 'Produit Local'), ('qualite', 'Certification Qualité'), ('aucune', 'Aucune Certification')], default='aucune', max_length=20)),
                ('certification_details', models.TextField(blank=True)),
                ('delivery_options', models.JSONField(blank=True, default=dict)),
                ('delivery_radius', models.IntegerField(default=50, help_text='Rayon de livraison en km')),
                ('total_sales', models.IntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_reviews', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='seller_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Vendeur',
                'verbose_name_plural': 'Profils Vendeurs',
            },
        ),
        migrations.CreateModel(
            name='ClientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferences', models.JSONField(blank=True, default=dict)),
                ('favorite_categories', models.JSONField(blank=True, default=list)),
                ('delivery_addresses', models.JSONField(blank=True, default=list)),
                ('newsletter_subscribed', models.BooleanField(default=True)),
                ('price_alerts', models.BooleanField(default=False)),
                ('recently_viewed_products', models.JSONField(blank=True, default=list)),
                ('loyalty_points', models.IntegerField(default=0)),
                ('membership_level', models.CharField(choices=[('standard', 'Standard'), ('premium', 'Premium'), ('vip', 'VIP')], default='standard', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL)),
                ('favorite_sellers', models.ManyToManyField(blank=True, related_name='favorited_by', to='account.sellerprofile')),
            ],
            options={
                'verbose_name': 'Profil Client',
                'verbose_name_plural': 'Profils Clients',
            },
        ),
    ]
